/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package datvexe;

import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import javax.swing.ListSelectionModel;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
/**
 *
 * @author huynh
 */
public class ShowStaffList extends javax.swing.JFrame{
    DefaultTableModel dtf ;
    /**
     * Creates new form ShowStaffList
     */
    public ShowStaffList(java.awt.Frame parent, boolean modal) {
        
        initComponents();
        DatVeXe datvexe = new DatVeXe(); 
        Connection connection;
        connection = datvexe.layKetNoi();
        performed(connection);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbListEmp = new javax.swing.JTable();
        btDel = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Hiển thị danh sách nhân viên");

        tbListEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CMND", "Họ", "Tên", "SĐT", "Giới tính", "Tên đăng nhập", "Mật khẩu", "Chức vụ", "Tình trạng làm việc"
            }
        ));
        jScrollPane1.setViewportView(tbListEmp);

        btDel.setText("Xóa nhân viên");
        btDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDelActionPerformed(evt);
            }
        });

        btUpdate.setText("Cập nhật thông tin nhân viên");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(btDel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btDel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDelActionPerformed
        if(tbListEmp.getSelectedRow()==-1) return;
        
        
        DatVeXe datvexe = new DatVeXe(); 
        Connection connection;
        connection = datvexe.layKetNoi();
        
        
        
        
        String sql = "UPDATE Staff SET Active='false',Staff_Account=NULL WHERE Staff_CMND=?";
        String sql1 = "DELETE Account where Account.Account = ?";
        String cmnd = "";
        
        cmnd = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),0);
        String first = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),1);
        String last = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),2);
        String account = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),5);
        System.out.println(" account cua nhan vien la 133: "+account);
        int confirm = JOptionPane.showConfirmDialog(rootPane,"Xác nhận thao tác xóa" ,"Bạn có chắc chắn xóa nhân viên \n"+cmnd+"\nHọ tên: "+first+" "+last, JOptionPane.YES_NO_OPTION);
                
        if(confirm ==JOptionPane.NO_OPTION){        
                JOptionPane.showMessageDialog(rootPane, "Thao tác xóa bị hủy");
        }else if(confirm ==JOptionPane.YES_OPTION){
            PreparedStatement pstt;
            PreparedStatement pstt1; 
        try {
            pstt = connection.prepareStatement(sql);
            pstt.setString(1, cmnd);
            int result = pstt.executeUpdate();
            
             pstt1 = connection.prepareStatement(sql1);
            pstt1.setString(1, account);
            int result1 = pstt1.executeUpdate();
            
            if(result>0 && result1>0){
                JOptionPane.showMessageDialog(rootPane, "Xóa nhân viên thành công!");
                performed(connection);
            
            }
        } catch (SQLException ex) {
            Logger.getLogger(ShowStaffList.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
                
        
        
        
                 
    }//GEN-LAST:event_btDelActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
       if(tbListEmp.getSelectedRow()==-1) return; 
        DatVeXe datvexe = new DatVeXe(); 
        Connection connection;
        connection = datvexe.layKetNoi();
        
        String cmnd;
        
        cmnd = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),0);
        String first = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),1);
        String last = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),2);
        String phone = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),3);
        String sex = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),4);
        String account = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),5);
        String password = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),6);
        String kind = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),7);
        String active = (String) tbListEmp.getValueAt(tbListEmp.getSelectedRow(),8);
         
        
        UpEmp upEmp = new UpEmp(this, rootPaneCheckingEnabled,cmnd, first, last, phone, sex, account, password,kind,active);
        
        upEmp.setLocationRelativeTo(null);
        upEmp.setVisible(true);
        performed(connection);
    }//GEN-LAST:event_btUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowStaffList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowStaffList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowStaffList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowStaffList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ShowStaffList dialog = new ShowStaffList(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    public void performedActive(DefaultTableModel dtf,Connection conn){
        String sql = "SELECT * FROM Staff where active = 'true'"; 
        
        
        
        
        dtf.addColumn("CMND");
        dtf.addColumn("Họ");
        dtf.addColumn("Tên");
        dtf.addColumn("SĐT");
        dtf.addColumn("Giới tính");
        dtf.addColumn("Tên đăng nhập");
        dtf.addColumn("Mật khẩu");
        dtf.addColumn("Chức vụ");
        dtf.addColumn("Tình trạng làm việc"); 
        ResultSet rs; 
        try { 
            Statement stt = conn.createStatement();
            rs = stt.executeQuery(sql); 
            while(rs.next()){
            String cmnd = rs.getString(1);
            String firstName = rs.getString(2);
            String lastName = rs.getString(3);
            String phone = rs.getString(4);
            String sex = rs.getString(5);
            String account = rs.getString(6);
            String password="";
            String kind = "";
            String sql2 = "SELECT Password,Kind from Account where Account.Account=?";
            boolean active = rs.getBoolean(7); 
            String activeString = "Làm việc";
            
            PreparedStatement pstt = conn.prepareStatement(sql2);
            pstt.setString(1, account);
            ResultSet rs2 = pstt.executeQuery();
            
            if(rs2.next()){
            password = rs2.getString(1);
            
            kind = rs2.getString(2); 
            if(kind.equals("noneactive")){
                kind = " ";
            }else if(kind.equals("boss")){
                kind="Quản lí";
            }else if(kind.equals("staff")){
                kind = "Nhân viên"; 
            }
            }
            
            
            
            dtf.addRow(new Object[]{cmnd,firstName,lastName,phone,sex,account,password,kind,activeString});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ShowStaffList.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    public void performedInActive(DefaultTableModel dtf, Connection conn){
        String sql = "SELECT * FROM Staff where active = 'false'"; 
        
        
        ListSelectionModel listSelectionModel = tbListEmp.getSelectionModel(); 
        listSelectionModel.setSelectionMode(listSelectionModel.SINGLE_SELECTION);
        tbListEmp.setModel(dtf);
        
        
        ResultSet rs; 
        try { 
            Statement stt = conn.createStatement();
            rs = stt.executeQuery(sql); 
            while(rs.next()){
            String cmnd = rs.getString(1);
            String firstName = rs.getString(2);
            String lastName = rs.getString(3);
            String phone = rs.getString(4);
            String sex = rs.getString(5);
            String account = rs.getString(6);
            String password="";
            String kind = "";
            String sql2 = "SELECT Password,Kind from Account where Account.Account=?";
            String activeString = "Đã nghỉ việc"; 
            
            
            PreparedStatement pstt = conn.prepareStatement(sql2);
            pstt.setString(1, account);
            ResultSet rs2 = pstt.executeQuery();
            
            if(rs2.next()){
            password = rs2.getString(1);
            
            kind = rs2.getString(2); 
            if(kind.equals("noneactive")){
                kind = " ";
            }else if(kind.equals("boss")){
                kind="Quản lí";
            }else if(kind.equals("staff")){
                kind = "Nhân viên"; 
            }
            }
            
            
            
            dtf.addRow(new Object[]{cmnd,firstName,lastName,phone,sex,account,password,kind,activeString});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ShowStaffList.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    public void performed(Connection conn){
        dtf =new DefaultTableModel();
        ListSelectionModel listSelectionModel = tbListEmp.getSelectionModel(); 
        listSelectionModel.setSelectionMode(listSelectionModel.SINGLE_SELECTION);
        tbListEmp.setModel(dtf);
        
        performedActive(dtf, conn);
        performedInActive(dtf, conn);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDel;
    private javax.swing.JButton btUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbListEmp;
    // End of variables declaration//GEN-END:variables
}
