/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package datvexe;

import java.awt.Color;
import java.security.interfaces.RSAKey;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author Vanic
 */
public class OrderTicket extends javax.swing.JFrame {

    /**
     * Creates new form OrderTicket
     */
    boolean checkNewUser = false;
    public OrderTicket() {
        initComponents();
        this.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        clear();
        label_errFirstName.setForeground(Color.red);
        label_errGaraName.setForeground(Color.red);
        label_errLastName.setForeground(Color.red);
        label_errSDT.setForeground(Color.red);
        label_errTime.setForeground(Color.red);
        label_errCMND.setForeground(Color.red);

    }
    
    public void clear(){
        txt_SDT.setText("");
        txt_firstName.setText("");
        txt_lastName.setText("");
        txt_note.setText("");
        txt_price.setText("");
        txt_price.setEditable(false);
        txt_staffCMND.setText("");
        cbb_bookTime.removeAllItems();
        cbb_noiDen.removeAllItems();
        cbb_noiDi.removeAllItems();
        cbb_seat.removeAllItems();
        cbb_tripName.removeAllItems();
        cb_isPaid.setSelected(false);
        
        label_firstName.setVisible(false);
        label_lastName.setVisible(false);
        txt_firstName.setVisible(false);
        txt_lastName.setVisible(false);
        
        label_errFirstName.setText("");
        label_errGaraName.setText("");
        label_errLastName.setText("");
        label_errSDT.setText("");
        label_errTime.setText("");
        label_errCMND.setText("");
        getDataStation();
    }
    public void getDataStation(){
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql = "select station_Name from Station";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                cbb_noiDi.addItem(rs.getString("station_Name"));
                cbb_noiDen.addItem(rs.getString("station_Name"));
            }
            ps.close();
            rs.close();
        } catch (Exception e) {
            System.out.println("loi getDataStation"+e);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_SDT = new javax.swing.JTextField();
        txt_lastName = new javax.swing.JTextField();
        txt_firstName = new javax.swing.JTextField();
        cb_isPaid = new javax.swing.JCheckBox();
        label_lastName = new javax.swing.JLabel();
        label_firstName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbb_noiDi = new javax.swing.JComboBox<>();
        cbb_noiDen = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        cbb_tripName = new javax.swing.JComboBox<>();
        cbb_bookTime = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        cbb_seat = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cbb_seatKind = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txt_price = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_note = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        txt_staffCMND = new javax.swing.JTextField();
        btn_order = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        label_errSDT = new javax.swing.JLabel();
        label_errLastName = new javax.swing.JLabel();
        label_errFirstName = new javax.swing.JLabel();
        label_errGaraName = new javax.swing.JLabel();
        label_errTime = new javax.swing.JLabel();
        label_errCMND = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nhập số điện thoại hành khách:");

        txt_SDT.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txt_SDTCaretUpdate(evt);
            }
        });
        txt_SDT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_SDTFocusLost(evt);
            }
        });
        txt_SDT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txt_SDTMouseExited(evt);
            }
        });
        txt_SDT.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                txt_SDTCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txt_SDTInputMethodTextChanged(evt);
            }
        });

        txt_lastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_lastNameActionPerformed(evt);
            }
        });

        cb_isPaid.setText("thanh toán");

        label_lastName.setText("Họ (Last Name): ");

        label_firstName.setText("Tên (First Name): ");

        jLabel4.setText("Nơi đi:");

        jLabel5.setText("Nơi đến: ");

        jLabel6.setText("ngày giờ khởi hành: ");

        jLabel10.setText("chọn chuyến xe: ");

        cbb_tripName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbb_tripNameMouseClicked(evt);
            }
        });

        cbb_bookTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbb_bookTimeMouseClicked(evt);
            }
        });
        cbb_bookTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbb_bookTimeActionPerformed(evt);
            }
        });

        jLabel7.setText("chọn ghế: ");

        cbb_seat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbb_seatMouseClicked(evt);
            }
        });

        jLabel8.setText("Loại ghế: ");

        cbb_seatKind.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "loai 1", "loai 2", "loai 3" }));
        cbb_seatKind.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbb_seatKindItemStateChanged(evt);
            }
        });
        cbb_seatKind.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cbb_seatKindMouseEntered(evt);
            }
        });

        jLabel9.setText("Giá ghế: ");

        jLabel11.setText("Lưu ý của khách hàng: ");

        txt_note.setColumns(20);
        txt_note.setRows(5);
        jScrollPane2.setViewportView(txt_note);

        jLabel12.setText("CMND của nhân viên đặt vé: ");

        txt_staffCMND.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_staffCMNDFocusLost(evt);
            }
        });

        btn_order.setText("Đặt vé");
        btn_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_orderActionPerformed(evt);
            }
        });

        btn_back.setText("<");
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_staffCMND)
                            .addComponent(btn_order, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_errCMND, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbb_seat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(cbb_seatKind, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_price, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cb_isPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9)))
                    .addComponent(jLabel11)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(cbb_noiDi, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(cbb_noiDen, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(99, 99, 99)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbb_tripName, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(69, 69, 69))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(label_errGaraName, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbb_bookTime, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label_errTime, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label_errLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_errFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(btn_back)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label_errSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txt_SDT, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_lastName))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_firstName)
                            .addComponent(txt_firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_back)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(label_firstName)
                    .addComponent(label_lastName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_SDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_errSDT)
                    .addComponent(label_errLastName)
                    .addComponent(label_errFirstName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel10)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbb_noiDi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbb_noiDen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbb_tripName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbb_bookTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label_errGaraName)
                            .addComponent(label_errTime))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbb_seat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbb_seatKind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_isPaid))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt_staffCMND, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_errCMND)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_order, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_lastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_lastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_lastNameActionPerformed

    private void cbb_bookTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbb_bookTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbb_bookTimeActionPerformed

    public String[] searchNamePassenger(String sdt){
        String[] s = new String[2];
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql = "select Passenger_First_Name, Passenger_Last_Name from Passenger where Passenger_SDT = '"+sdt+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if (!rs.next()){
                s[0]="";s[1] = "";
                return s;
            }else{
                s[0] = rs.getString("Passenger_Last_Name");
                s[1] = rs.getString("Passenger_First_Name");
            }
        } catch (Exception e) {
            System.out.println("loi searchNamePassenger"+e);
        }
        return s;
    } 
    private void txt_SDTCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txt_SDTCaretUpdate
        
    }//GEN-LAST:event_txt_SDTCaretUpdate

    private void txt_SDTCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txt_SDTCaretPositionChanged
        
    }//GEN-LAST:event_txt_SDTCaretPositionChanged

    private void txt_SDTInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txt_SDTInputMethodTextChanged
        
    }//GEN-LAST:event_txt_SDTInputMethodTextChanged

    private void txt_SDTMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_SDTMouseExited
        
    }//GEN-LAST:event_txt_SDTMouseExited

    private void txt_SDTFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_SDTFocusLost
        String[] s = new String[2];
        s = searchNamePassenger(txt_SDT.getText());
        if (!s[0].equals("") && !s[1].equals("")){
            label_firstName.setVisible(true);
            label_lastName.setVisible(true);
            txt_firstName.setVisible(true);
            txt_lastName.setVisible(true);
            txt_lastName.setText(s[0]);
            txt_firstName.setText(s[1]);
            checkNewUser = false;
        }else if (!txt_SDT.getText().equals("")){
            JOptionPane.showMessageDialog(this, "SDT chưa được đăng ký\n vui lòng nhập vào họ và tên của hành khách mới" ,"Inane Eror",JOptionPane.ERROR_MESSAGE);
            txt_lastName.setText("");
            txt_firstName.setText("");
            label_firstName.setVisible(true);
            label_lastName.setVisible(true);
            txt_firstName.setVisible(true);
            txt_lastName.setVisible(true);
            checkNewUser = true;
        }else{
            label_firstName.setVisible(false);
            label_lastName.setVisible(false);
            txt_firstName.setVisible(false);
            txt_lastName.setVisible(false);
            checkNewUser = false;
        }
    }//GEN-LAST:event_txt_SDTFocusLost

    public String convertStationNametoStationNo(String station_Name){
        String Station_No = "";
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="select station_No from Station where station_Name ='"+station_Name+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                Station_No = rs.getString("station_No");
            }
            ps.close();
            rs.close();
        } catch (Exception e) {
            System.out.println("loi convertStationNametoStationNo"+e);
        }
        return Station_No;
    }
    
    public String[] searchGaraName(String noiDi,String noiDen){
        String[] listGaraName = new String[100];
        int d = 0;
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="select GaraName from TotalScheduels t inner join ScheduelOfGara s on t.SChedule_no = s.Scheduel_no where BeginStation ='"+noiDi+"' and EndStation = '"+noiDen+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                listGaraName[d] = rs.getString("GaraName");
                d++;
            }
        } catch (Exception e) {
            System.out.println("loi searchGaraName"+e);
        }
        return listGaraName;
    }
    private void cbb_tripNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbb_tripNameMouseClicked
        cbb_tripName.removeAllItems();
        String noiDi = String.valueOf(cbb_noiDi.getSelectedItem());
        String noiDen = String.valueOf(cbb_noiDen.getSelectedItem());
        String ma_NoiDi = convertStationNametoStationNo(noiDi);
        String ma_NoiDen = convertStationNametoStationNo(noiDen);
        String[] listGaraName = new String[100];
        listGaraName = searchGaraName(ma_NoiDi, ma_NoiDen);
        for (int i=0;i<=100;i++){
            if (listGaraName[i]!=null){
                cbb_tripName.addItem(listGaraName[i]);
            }else break;  
        }
    }//GEN-LAST:event_cbb_tripNameMouseClicked
    public String[] searchTime(String garaName){
        String[] listTime = new String[100];
        int d = 0;
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="select DepartTime from ScheduelOfGara where GaraName ='"+garaName+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                listTime[d] = rs.getString("DepartTime");
                d++;
            }
        } catch (Exception e) {
            System.out.println("loi searchTime"+e);
        }
        return listTime;
    }
    private void cbb_bookTimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbb_bookTimeMouseClicked
        cbb_bookTime.removeAllItems();
        String GaraName = String.valueOf(cbb_tripName.getSelectedItem());
        String[] listTime = searchTime(GaraName);
        for (int i = 0;i<=100;i++){
            if (listTime[i]!= null){
                cbb_bookTime.addItem(listTime[i]);
            }else break;
        }
    }//GEN-LAST:event_cbb_bookTimeMouseClicked

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
       this.setVisible(false);
       ManageTicket mt = new ManageTicket();
        mt.setLocationRelativeTo(null);
        mt.setVisible(true);
    }//GEN-LAST:event_btn_backActionPerformed

    public String searchTrip_No(String garaName, String time){
        String trip_No = "";
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="select Trip_No from trip t inner join ScheduelOfGara s on t.TripOfGara_no = s.TripOfGara_no where GaraName = '"+garaName+"' and DepartTime ='"+time+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                trip_No = rs.getString("Trip_No");
            }
            ps.close();
            rs.close();
        } catch (Exception e) {
            System.out.println("loi searchTrip_No"+e);
        }
        return trip_No;
    }
    
    public int searchSeatAmount(String trip_No){
        String seatAmount = "";
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="select Car_Seat_Amount from Car c inner join ManageDrive m on c.Car_License_Plates = m.License_Plates where Trip_No = '"+trip_No+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if (!rs.next()) return 0;
            seatAmount = rs.getString("Car_Seat_Amount");
            ps.close();
            rs.close();
        } catch (Exception e) {
            System.out.println("loi searchSeatAmount"+e);
        }
        return Integer.parseInt(seatAmount);
    }
    
    public Vector searchOrderSeat(String trip_No){
        Vector listSeat = new Vector();
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="select Seat_Position from Ticket where Trip_No = '"+trip_No+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                listSeat.add(rs.getString("Seat_Position"));
            }
            ps.close();
            rs.close();
        } catch (Exception e) {
            System.out.println("Loi searchOrderSeat"+e);
        }
        return listSeat;
    }
    private void cbb_seatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbb_seatMouseClicked
        cbb_seat.removeAllItems();
        String trip_No = "";
        String garaName = String.valueOf(cbb_tripName.getSelectedItem());
        String time = String.valueOf(cbb_bookTime.getSelectedItem());
        if (!garaName.equals("null") && !time.equals("null")){
            trip_No = searchTrip_No(garaName, time);
        
            int seatAmount = searchSeatAmount(trip_No);
            if (seatAmount == 0){
                JOptionPane.showMessageDialog(this, "Chưa có xe nào cho chuyến đi này \n Vui lòng thay đổi thông tin chuyến đi khác!","Inane Eror",JOptionPane.ERROR_MESSAGE);
            }else {
                Vector listSeat = new Vector();
                listSeat = searchOrderSeat(trip_No);
                for (int i=1;i<=seatAmount;i++){
                    if (!listSeat.contains(String.valueOf(i))){
                        cbb_seat.addItem(String.valueOf(i));
                    }
                }
            }
        }
        
    }//GEN-LAST:event_cbb_seatMouseClicked

    private void cbb_seatKindMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbb_seatKindMouseEntered
        
    }//GEN-LAST:event_cbb_seatKindMouseEntered
    
    public String priceTicket(String trip_No){
        String priceTicket = "";
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="select TicketPrice from Trip t inner join ScheduelOfGara s on t.TripOfGara_no = s.TripOfGara_no where Trip_No = '"+trip_No+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                double price = Double.valueOf(rs.getString("TicketPrice"));
                priceTicket = String.valueOf((int)price);
            }
            rs.close();
            ps.close();
        } catch (Exception e) {
            System.out.println("Loi priceTicket funtion"+e);
        }
        return priceTicket+" vnd";
    }
    private void cbb_seatKindItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbb_seatKindItemStateChanged
        String trip_No = "";
        String garaName = String.valueOf(cbb_tripName.getSelectedItem());
        String time = String.valueOf(cbb_bookTime.getSelectedItem());
        if (!garaName.equals("null") && !time.equals("null")){
            trip_No = searchTrip_No(garaName, time);
            txt_price.setText(priceTicket(trip_No));
        }
        
    }//GEN-LAST:event_cbb_seatKindItemStateChanged

    public boolean checkStaffCMND(String staffCMND){
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="select * from Staff where Staff_CMND ='"+staffCMND+"'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if (!rs.next()) return false;
            rs.close();
            ps.close();
        } catch (Exception e) {
            System.out.println("Loi checkStaffMNND"+e);
        }
        return true;
    }
    private void txt_staffCMNDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_staffCMNDFocusLost
        String staffCMND = txt_staffCMND.getText();
        staffCMND.trim();
        if (!staffCMND.equals("")){
            if (!checkStaffCMND(staffCMND)){
                JOptionPane.showMessageDialog(this, "CMND của nhân viên vừa nhập không tồn tại","Inane Eror",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txt_staffCMNDFocusLost
    
    public String sinhMa(String cotMa,String tenBang){
        String kq = "";
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql = "select MAX("+cotMa+") as X from "+tenBang;
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                kq = rs.getString("X");
            }
            if (kq == null){
                return kq = "0";
            }else{
                int so = Integer.valueOf(kq)+1;
                kq = String.valueOf(so);
            }
        } catch (Exception e) {
            System.out.println(e+"loi sinh ma");
        }
        return kq;
    }
    
    public void orderTicket(String seatPosition,String seatKind,String isPaid, String note, String time, String staffCMND, String sdt, String trip_No){
        String ticKet_No = sinhMa("Ticket_No", "Ticket");
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="insert into Ticket values (?,?,?,?,?,?,?,?,?)";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setString(1, ticKet_No);
            ps.setString(2, seatPosition);
            ps.setString(3, seatKind);
            ps.setString(4, isPaid);
            ps.setString(5, note);
            ps.setString(6, time);
            ps.setString(7, staffCMND);
            ps.setString(8, sdt);
            ps.setString(9, trip_No);
            ps.executeUpdate();
            ps.close();
        } catch (Exception e) {
            System.out.println("Loi orderTicket"+e);
        }
    }
    
    public void addNewPassenger(String sdt, String firstName, String lastName){
        Connection ketNoi = DatVeXe.layKetNoi();
        String sql ="insert into Passenger (Passenger_SDT, Passenger_First_Name, Passenger_Last_Name) values (?,?,?)";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setString(1, sdt);
            ps.setString(2, firstName);
            ps.setString(3, lastName);
            ps.executeUpdate();
            ps.close();
        } catch (Exception e) {
            System.out.println("Loi addNewPassenger"+e);
        }
    }
    private void btn_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_orderActionPerformed
        String sdt = txt_SDT.getText();
        String garaName = String.valueOf(cbb_tripName.getSelectedItem());
        String time = String.valueOf(cbb_bookTime.getSelectedItem());
        String seatPosition = String.valueOf(cbb_seat.getSelectedItem());
        String seatKind = String.valueOf(cbb_seatKind.getSelectedItem());
        String isPaid = cb_isPaid.isSelected() ? "1" : "0";
        String note = txt_note.getText();
        String staffCMND = txt_staffCMND.getText();
        String lastName = "";
        String firstName = "";
        boolean check1 = false;
        boolean check2 = false;
        boolean check3 = false;
        boolean check4 = false;
        if (!sdt.equals("")){
            label_errSDT.setText("");
            lastName = txt_lastName.getText();
            firstName = txt_firstName.getText();
            if (lastName.equals("")){
                label_errLastName.setText("Họ không được bỏ trống");
            }else label_errLastName.setText("");
            if (firstName.equals("")){ 
                label_errFirstName.setText("Tên không được bỏ trống");
            }else label_errFirstName.setText("");
            if (!lastName.equals("") && !firstName.equals("")) check1 = true;
        }else {
            check1 = false;
            label_errSDT.setText("SDT không được bỏ trống");
        }
        if (garaName.equals("null")){
            check2 = false;
            label_errGaraName.setText("Hãy chọn nhà xe!");
        }else {
            check2 = true;
            label_errGaraName.setText("");
        }
        if (time.equals("null")){
            check3 = false;
            label_errTime.setText("Hãy chọn thời gian đi!");
        }else {
            check3 = true;
            label_errTime.setText("");
        }
        if (staffCMND.equals("")){
            check4 = false;
            label_errCMND.setText("nhập CMND nhân viên");
        }else{
            check4 = true;
            label_errCMND.setText("");
        }
        if (check1 == true && check2 == true && check3 == true && check4 == true){
            if (!seatPosition.equals("null") && !txt_price.getText().equals("")){
                String trip_No = searchTrip_No(garaName, time);
                if (checkNewUser == true){
                    addNewPassenger(sdt,firstName,lastName);
                }
                orderTicket(seatPosition, seatKind, isPaid, note, time, staffCMND, sdt, trip_No);
                JOptionPane.showMessageDialog(this, "Đã đặt vé thành công");
                btn_backActionPerformed(evt);
            }else{
                JOptionPane.showMessageDialog(this, "Hãy chọn ghế và loại ghế trước khi đặt vé!","Inane Warning",JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }//GEN-LAST:event_btn_orderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderTicket().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_order;
    private javax.swing.JCheckBox cb_isPaid;
    private javax.swing.JComboBox<String> cbb_bookTime;
    private javax.swing.JComboBox<String> cbb_noiDen;
    private javax.swing.JComboBox<String> cbb_noiDi;
    private javax.swing.JComboBox<String> cbb_seat;
    private javax.swing.JComboBox<String> cbb_seatKind;
    private javax.swing.JComboBox<String> cbb_tripName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_errCMND;
    private javax.swing.JLabel label_errFirstName;
    private javax.swing.JLabel label_errGaraName;
    private javax.swing.JLabel label_errLastName;
    private javax.swing.JLabel label_errSDT;
    private javax.swing.JLabel label_errTime;
    private javax.swing.JLabel label_firstName;
    private javax.swing.JLabel label_lastName;
    private javax.swing.JTextField txt_SDT;
    private javax.swing.JTextField txt_firstName;
    private javax.swing.JTextField txt_lastName;
    private javax.swing.JTextArea txt_note;
    private javax.swing.JTextField txt_price;
    private javax.swing.JTextField txt_staffCMND;
    // End of variables declaration//GEN-END:variables
}
